# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on: push

jobs:

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Build
      run: |
        for arch in amd64 arm64; do
          mkdir -p target/${arch}
          env GOOS=linux GOARCH=${arch} go build -v -o target/${arch}/${{ github.event.repository.name }} ./...
          tar cvzf target/${{ github.event.repository.name }}_linux-${arch}.tar.gz -C target/${arch} ${{ github.event.repository.name }}
        done

    - name: Upload amd64 build
      uses: actions/upload-artifact@v4
      with:
        path: target/${{ github.event.repository.name }}_linux-amd64.tar.gz

    - name: Upload arm64 build
      uses: actions/upload-artifact@v4
      with:
        path: target/${{ github.event.repository.name }}_linux-arm64.tar.gz

    - name: (Main only) Create tag
      uses: actions/github-script@v7
      if: github.ref_name == 'main'
      id: create-tag
      with:
        script: |
          let tag_name = 'v0.' + context.runNumber.toString()
          github.rest.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: 'refs/tags/' + tag_name,
            sha: context.sha
          })
          return tag_name

    - name: (Main only) Create release
      uses: softprops/action-gh-release@v2
      if: github.ref_name == 'main'
      with:
        tag_name: ${{ steps.create-tag.outputs.result }}
        files: |
          target/${{ github.event.repository.name }}_linux-amd64.tar.gz
          target/${{ github.event.repository.name }}_linux-arm64.tar.gz
